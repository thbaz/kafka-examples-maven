/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.scigility.kafka.canonical.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CoreContractsSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7439533001448249158L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CoreContractsSchema\",\"namespace\":\"ch.scigility.kafka.canonical.avro\",\"fields\":[{\"name\":\"COCO_ID\",\"type\":\"long\"},{\"name\":\"COCO_TYPE\",\"type\":\"long\"},{\"name\":\"COOC_COVERAGE\",\"type\":\"long\"},{\"name\":\"COCO_ANNUAL_PREMIUM\",\"type\":\"long\"},{\"name\":\"COCO_START_DATE\",\"type\":\"long\"},{\"name\":\"COCO_END_DATE\",\"type\":\"long\"},{\"name\":\"COCO_COCU_ID\",\"type\":\"long\"},{\"name\":\"COCO_COAG_ID\",\"type\":\"long\"},{\"name\":\"COCO_TOTAL_PAID_PREMIUMS\",\"type\":\"long\"},{\"name\":\"COCO_TOTAL_PAID_CLAIMS\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CoreContractsSchema> ENCODER =
      new BinaryMessageEncoder<CoreContractsSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CoreContractsSchema> DECODER =
      new BinaryMessageDecoder<CoreContractsSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CoreContractsSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CoreContractsSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CoreContractsSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CoreContractsSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CoreContractsSchema from a ByteBuffer. */
  public static CoreContractsSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long COCO_ID;
  @Deprecated public long COCO_TYPE;
  @Deprecated public long COOC_COVERAGE;
  @Deprecated public long COCO_ANNUAL_PREMIUM;
  @Deprecated public long COCO_START_DATE;
  @Deprecated public long COCO_END_DATE;
  @Deprecated public long COCO_COCU_ID;
  @Deprecated public long COCO_COAG_ID;
  @Deprecated public long COCO_TOTAL_PAID_PREMIUMS;
  @Deprecated public long COCO_TOTAL_PAID_CLAIMS;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CoreContractsSchema() {}

  /**
   * All-args constructor.
   * @param COCO_ID The new value for COCO_ID
   * @param COCO_TYPE The new value for COCO_TYPE
   * @param COOC_COVERAGE The new value for COOC_COVERAGE
   * @param COCO_ANNUAL_PREMIUM The new value for COCO_ANNUAL_PREMIUM
   * @param COCO_START_DATE The new value for COCO_START_DATE
   * @param COCO_END_DATE The new value for COCO_END_DATE
   * @param COCO_COCU_ID The new value for COCO_COCU_ID
   * @param COCO_COAG_ID The new value for COCO_COAG_ID
   * @param COCO_TOTAL_PAID_PREMIUMS The new value for COCO_TOTAL_PAID_PREMIUMS
   * @param COCO_TOTAL_PAID_CLAIMS The new value for COCO_TOTAL_PAID_CLAIMS
   */
  public CoreContractsSchema(java.lang.Long COCO_ID, java.lang.Long COCO_TYPE, java.lang.Long COOC_COVERAGE, java.lang.Long COCO_ANNUAL_PREMIUM, java.lang.Long COCO_START_DATE, java.lang.Long COCO_END_DATE, java.lang.Long COCO_COCU_ID, java.lang.Long COCO_COAG_ID, java.lang.Long COCO_TOTAL_PAID_PREMIUMS, java.lang.Long COCO_TOTAL_PAID_CLAIMS) {
    this.COCO_ID = COCO_ID;
    this.COCO_TYPE = COCO_TYPE;
    this.COOC_COVERAGE = COOC_COVERAGE;
    this.COCO_ANNUAL_PREMIUM = COCO_ANNUAL_PREMIUM;
    this.COCO_START_DATE = COCO_START_DATE;
    this.COCO_END_DATE = COCO_END_DATE;
    this.COCO_COCU_ID = COCO_COCU_ID;
    this.COCO_COAG_ID = COCO_COAG_ID;
    this.COCO_TOTAL_PAID_PREMIUMS = COCO_TOTAL_PAID_PREMIUMS;
    this.COCO_TOTAL_PAID_CLAIMS = COCO_TOTAL_PAID_CLAIMS;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return COCO_ID;
    case 1: return COCO_TYPE;
    case 2: return COOC_COVERAGE;
    case 3: return COCO_ANNUAL_PREMIUM;
    case 4: return COCO_START_DATE;
    case 5: return COCO_END_DATE;
    case 6: return COCO_COCU_ID;
    case 7: return COCO_COAG_ID;
    case 8: return COCO_TOTAL_PAID_PREMIUMS;
    case 9: return COCO_TOTAL_PAID_CLAIMS;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: COCO_ID = (java.lang.Long)value$; break;
    case 1: COCO_TYPE = (java.lang.Long)value$; break;
    case 2: COOC_COVERAGE = (java.lang.Long)value$; break;
    case 3: COCO_ANNUAL_PREMIUM = (java.lang.Long)value$; break;
    case 4: COCO_START_DATE = (java.lang.Long)value$; break;
    case 5: COCO_END_DATE = (java.lang.Long)value$; break;
    case 6: COCO_COCU_ID = (java.lang.Long)value$; break;
    case 7: COCO_COAG_ID = (java.lang.Long)value$; break;
    case 8: COCO_TOTAL_PAID_PREMIUMS = (java.lang.Long)value$; break;
    case 9: COCO_TOTAL_PAID_CLAIMS = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'COCO_ID' field.
   * @return The value of the 'COCO_ID' field.
   */
  public java.lang.Long getCOCOID() {
    return COCO_ID;
  }

  /**
   * Sets the value of the 'COCO_ID' field.
   * @param value the value to set.
   */
  public void setCOCOID(java.lang.Long value) {
    this.COCO_ID = value;
  }

  /**
   * Gets the value of the 'COCO_TYPE' field.
   * @return The value of the 'COCO_TYPE' field.
   */
  public java.lang.Long getCOCOTYPE() {
    return COCO_TYPE;
  }

  /**
   * Sets the value of the 'COCO_TYPE' field.
   * @param value the value to set.
   */
  public void setCOCOTYPE(java.lang.Long value) {
    this.COCO_TYPE = value;
  }

  /**
   * Gets the value of the 'COOC_COVERAGE' field.
   * @return The value of the 'COOC_COVERAGE' field.
   */
  public java.lang.Long getCOOCCOVERAGE() {
    return COOC_COVERAGE;
  }

  /**
   * Sets the value of the 'COOC_COVERAGE' field.
   * @param value the value to set.
   */
  public void setCOOCCOVERAGE(java.lang.Long value) {
    this.COOC_COVERAGE = value;
  }

  /**
   * Gets the value of the 'COCO_ANNUAL_PREMIUM' field.
   * @return The value of the 'COCO_ANNUAL_PREMIUM' field.
   */
  public java.lang.Long getCOCOANNUALPREMIUM() {
    return COCO_ANNUAL_PREMIUM;
  }

  /**
   * Sets the value of the 'COCO_ANNUAL_PREMIUM' field.
   * @param value the value to set.
   */
  public void setCOCOANNUALPREMIUM(java.lang.Long value) {
    this.COCO_ANNUAL_PREMIUM = value;
  }

  /**
   * Gets the value of the 'COCO_START_DATE' field.
   * @return The value of the 'COCO_START_DATE' field.
   */
  public java.lang.Long getCOCOSTARTDATE() {
    return COCO_START_DATE;
  }

  /**
   * Sets the value of the 'COCO_START_DATE' field.
   * @param value the value to set.
   */
  public void setCOCOSTARTDATE(java.lang.Long value) {
    this.COCO_START_DATE = value;
  }

  /**
   * Gets the value of the 'COCO_END_DATE' field.
   * @return The value of the 'COCO_END_DATE' field.
   */
  public java.lang.Long getCOCOENDDATE() {
    return COCO_END_DATE;
  }

  /**
   * Sets the value of the 'COCO_END_DATE' field.
   * @param value the value to set.
   */
  public void setCOCOENDDATE(java.lang.Long value) {
    this.COCO_END_DATE = value;
  }

  /**
   * Gets the value of the 'COCO_COCU_ID' field.
   * @return The value of the 'COCO_COCU_ID' field.
   */
  public java.lang.Long getCOCOCOCUID() {
    return COCO_COCU_ID;
  }

  /**
   * Sets the value of the 'COCO_COCU_ID' field.
   * @param value the value to set.
   */
  public void setCOCOCOCUID(java.lang.Long value) {
    this.COCO_COCU_ID = value;
  }

  /**
   * Gets the value of the 'COCO_COAG_ID' field.
   * @return The value of the 'COCO_COAG_ID' field.
   */
  public java.lang.Long getCOCOCOAGID() {
    return COCO_COAG_ID;
  }

  /**
   * Sets the value of the 'COCO_COAG_ID' field.
   * @param value the value to set.
   */
  public void setCOCOCOAGID(java.lang.Long value) {
    this.COCO_COAG_ID = value;
  }

  /**
   * Gets the value of the 'COCO_TOTAL_PAID_PREMIUMS' field.
   * @return The value of the 'COCO_TOTAL_PAID_PREMIUMS' field.
   */
  public java.lang.Long getCOCOTOTALPAIDPREMIUMS() {
    return COCO_TOTAL_PAID_PREMIUMS;
  }

  /**
   * Sets the value of the 'COCO_TOTAL_PAID_PREMIUMS' field.
   * @param value the value to set.
   */
  public void setCOCOTOTALPAIDPREMIUMS(java.lang.Long value) {
    this.COCO_TOTAL_PAID_PREMIUMS = value;
  }

  /**
   * Gets the value of the 'COCO_TOTAL_PAID_CLAIMS' field.
   * @return The value of the 'COCO_TOTAL_PAID_CLAIMS' field.
   */
  public java.lang.Long getCOCOTOTALPAIDCLAIMS() {
    return COCO_TOTAL_PAID_CLAIMS;
  }

  /**
   * Sets the value of the 'COCO_TOTAL_PAID_CLAIMS' field.
   * @param value the value to set.
   */
  public void setCOCOTOTALPAIDCLAIMS(java.lang.Long value) {
    this.COCO_TOTAL_PAID_CLAIMS = value;
  }

  /**
   * Creates a new CoreContractsSchema RecordBuilder.
   * @return A new CoreContractsSchema RecordBuilder
   */
  public static ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder newBuilder() {
    return new ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder();
  }

  /**
   * Creates a new CoreContractsSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CoreContractsSchema RecordBuilder
   */
  public static ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder newBuilder(ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder other) {
    return new ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder(other);
  }

  /**
   * Creates a new CoreContractsSchema RecordBuilder by copying an existing CoreContractsSchema instance.
   * @param other The existing instance to copy.
   * @return A new CoreContractsSchema RecordBuilder
   */
  public static ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder newBuilder(ch.scigility.kafka.canonical.avro.CoreContractsSchema other) {
    return new ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder(other);
  }

  /**
   * RecordBuilder for CoreContractsSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CoreContractsSchema>
    implements org.apache.avro.data.RecordBuilder<CoreContractsSchema> {

    private long COCO_ID;
    private long COCO_TYPE;
    private long COOC_COVERAGE;
    private long COCO_ANNUAL_PREMIUM;
    private long COCO_START_DATE;
    private long COCO_END_DATE;
    private long COCO_COCU_ID;
    private long COCO_COAG_ID;
    private long COCO_TOTAL_PAID_PREMIUMS;
    private long COCO_TOTAL_PAID_CLAIMS;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.COCO_ID)) {
        this.COCO_ID = data().deepCopy(fields()[0].schema(), other.COCO_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.COCO_TYPE)) {
        this.COCO_TYPE = data().deepCopy(fields()[1].schema(), other.COCO_TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.COOC_COVERAGE)) {
        this.COOC_COVERAGE = data().deepCopy(fields()[2].schema(), other.COOC_COVERAGE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.COCO_ANNUAL_PREMIUM)) {
        this.COCO_ANNUAL_PREMIUM = data().deepCopy(fields()[3].schema(), other.COCO_ANNUAL_PREMIUM);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.COCO_START_DATE)) {
        this.COCO_START_DATE = data().deepCopy(fields()[4].schema(), other.COCO_START_DATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.COCO_END_DATE)) {
        this.COCO_END_DATE = data().deepCopy(fields()[5].schema(), other.COCO_END_DATE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.COCO_COCU_ID)) {
        this.COCO_COCU_ID = data().deepCopy(fields()[6].schema(), other.COCO_COCU_ID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.COCO_COAG_ID)) {
        this.COCO_COAG_ID = data().deepCopy(fields()[7].schema(), other.COCO_COAG_ID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.COCO_TOTAL_PAID_PREMIUMS)) {
        this.COCO_TOTAL_PAID_PREMIUMS = data().deepCopy(fields()[8].schema(), other.COCO_TOTAL_PAID_PREMIUMS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.COCO_TOTAL_PAID_CLAIMS)) {
        this.COCO_TOTAL_PAID_CLAIMS = data().deepCopy(fields()[9].schema(), other.COCO_TOTAL_PAID_CLAIMS);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CoreContractsSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.scigility.kafka.canonical.avro.CoreContractsSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.COCO_ID)) {
        this.COCO_ID = data().deepCopy(fields()[0].schema(), other.COCO_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.COCO_TYPE)) {
        this.COCO_TYPE = data().deepCopy(fields()[1].schema(), other.COCO_TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.COOC_COVERAGE)) {
        this.COOC_COVERAGE = data().deepCopy(fields()[2].schema(), other.COOC_COVERAGE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.COCO_ANNUAL_PREMIUM)) {
        this.COCO_ANNUAL_PREMIUM = data().deepCopy(fields()[3].schema(), other.COCO_ANNUAL_PREMIUM);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.COCO_START_DATE)) {
        this.COCO_START_DATE = data().deepCopy(fields()[4].schema(), other.COCO_START_DATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.COCO_END_DATE)) {
        this.COCO_END_DATE = data().deepCopy(fields()[5].schema(), other.COCO_END_DATE);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.COCO_COCU_ID)) {
        this.COCO_COCU_ID = data().deepCopy(fields()[6].schema(), other.COCO_COCU_ID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.COCO_COAG_ID)) {
        this.COCO_COAG_ID = data().deepCopy(fields()[7].schema(), other.COCO_COAG_ID);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.COCO_TOTAL_PAID_PREMIUMS)) {
        this.COCO_TOTAL_PAID_PREMIUMS = data().deepCopy(fields()[8].schema(), other.COCO_TOTAL_PAID_PREMIUMS);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.COCO_TOTAL_PAID_CLAIMS)) {
        this.COCO_TOTAL_PAID_CLAIMS = data().deepCopy(fields()[9].schema(), other.COCO_TOTAL_PAID_CLAIMS);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'COCO_ID' field.
      * @return The value.
      */
    public java.lang.Long getCOCOID() {
      return COCO_ID;
    }

    /**
      * Sets the value of the 'COCO_ID' field.
      * @param value The value of 'COCO_ID'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOID(long value) {
      validate(fields()[0], value);
      this.COCO_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_ID' field has been set.
      * @return True if the 'COCO_ID' field has been set, false otherwise.
      */
    public boolean hasCOCOID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'COCO_ID' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_TYPE' field.
      * @return The value.
      */
    public java.lang.Long getCOCOTYPE() {
      return COCO_TYPE;
    }

    /**
      * Sets the value of the 'COCO_TYPE' field.
      * @param value The value of 'COCO_TYPE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOTYPE(long value) {
      validate(fields()[1], value);
      this.COCO_TYPE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_TYPE' field has been set.
      * @return True if the 'COCO_TYPE' field has been set, false otherwise.
      */
    public boolean hasCOCOTYPE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'COCO_TYPE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOTYPE() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'COOC_COVERAGE' field.
      * @return The value.
      */
    public java.lang.Long getCOOCCOVERAGE() {
      return COOC_COVERAGE;
    }

    /**
      * Sets the value of the 'COOC_COVERAGE' field.
      * @param value The value of 'COOC_COVERAGE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOOCCOVERAGE(long value) {
      validate(fields()[2], value);
      this.COOC_COVERAGE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'COOC_COVERAGE' field has been set.
      * @return True if the 'COOC_COVERAGE' field has been set, false otherwise.
      */
    public boolean hasCOOCCOVERAGE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'COOC_COVERAGE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOOCCOVERAGE() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_ANNUAL_PREMIUM' field.
      * @return The value.
      */
    public java.lang.Long getCOCOANNUALPREMIUM() {
      return COCO_ANNUAL_PREMIUM;
    }

    /**
      * Sets the value of the 'COCO_ANNUAL_PREMIUM' field.
      * @param value The value of 'COCO_ANNUAL_PREMIUM'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOANNUALPREMIUM(long value) {
      validate(fields()[3], value);
      this.COCO_ANNUAL_PREMIUM = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_ANNUAL_PREMIUM' field has been set.
      * @return True if the 'COCO_ANNUAL_PREMIUM' field has been set, false otherwise.
      */
    public boolean hasCOCOANNUALPREMIUM() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'COCO_ANNUAL_PREMIUM' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOANNUALPREMIUM() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_START_DATE' field.
      * @return The value.
      */
    public java.lang.Long getCOCOSTARTDATE() {
      return COCO_START_DATE;
    }

    /**
      * Sets the value of the 'COCO_START_DATE' field.
      * @param value The value of 'COCO_START_DATE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOSTARTDATE(long value) {
      validate(fields()[4], value);
      this.COCO_START_DATE = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_START_DATE' field has been set.
      * @return True if the 'COCO_START_DATE' field has been set, false otherwise.
      */
    public boolean hasCOCOSTARTDATE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'COCO_START_DATE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOSTARTDATE() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_END_DATE' field.
      * @return The value.
      */
    public java.lang.Long getCOCOENDDATE() {
      return COCO_END_DATE;
    }

    /**
      * Sets the value of the 'COCO_END_DATE' field.
      * @param value The value of 'COCO_END_DATE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOENDDATE(long value) {
      validate(fields()[5], value);
      this.COCO_END_DATE = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_END_DATE' field has been set.
      * @return True if the 'COCO_END_DATE' field has been set, false otherwise.
      */
    public boolean hasCOCOENDDATE() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'COCO_END_DATE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOENDDATE() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_COCU_ID' field.
      * @return The value.
      */
    public java.lang.Long getCOCOCOCUID() {
      return COCO_COCU_ID;
    }

    /**
      * Sets the value of the 'COCO_COCU_ID' field.
      * @param value The value of 'COCO_COCU_ID'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOCOCUID(long value) {
      validate(fields()[6], value);
      this.COCO_COCU_ID = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_COCU_ID' field has been set.
      * @return True if the 'COCO_COCU_ID' field has been set, false otherwise.
      */
    public boolean hasCOCOCOCUID() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'COCO_COCU_ID' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOCOCUID() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_COAG_ID' field.
      * @return The value.
      */
    public java.lang.Long getCOCOCOAGID() {
      return COCO_COAG_ID;
    }

    /**
      * Sets the value of the 'COCO_COAG_ID' field.
      * @param value The value of 'COCO_COAG_ID'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOCOAGID(long value) {
      validate(fields()[7], value);
      this.COCO_COAG_ID = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_COAG_ID' field has been set.
      * @return True if the 'COCO_COAG_ID' field has been set, false otherwise.
      */
    public boolean hasCOCOCOAGID() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'COCO_COAG_ID' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOCOAGID() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_TOTAL_PAID_PREMIUMS' field.
      * @return The value.
      */
    public java.lang.Long getCOCOTOTALPAIDPREMIUMS() {
      return COCO_TOTAL_PAID_PREMIUMS;
    }

    /**
      * Sets the value of the 'COCO_TOTAL_PAID_PREMIUMS' field.
      * @param value The value of 'COCO_TOTAL_PAID_PREMIUMS'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOTOTALPAIDPREMIUMS(long value) {
      validate(fields()[8], value);
      this.COCO_TOTAL_PAID_PREMIUMS = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_TOTAL_PAID_PREMIUMS' field has been set.
      * @return True if the 'COCO_TOTAL_PAID_PREMIUMS' field has been set, false otherwise.
      */
    public boolean hasCOCOTOTALPAIDPREMIUMS() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'COCO_TOTAL_PAID_PREMIUMS' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOTOTALPAIDPREMIUMS() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'COCO_TOTAL_PAID_CLAIMS' field.
      * @return The value.
      */
    public java.lang.Long getCOCOTOTALPAIDCLAIMS() {
      return COCO_TOTAL_PAID_CLAIMS;
    }

    /**
      * Sets the value of the 'COCO_TOTAL_PAID_CLAIMS' field.
      * @param value The value of 'COCO_TOTAL_PAID_CLAIMS'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder setCOCOTOTALPAIDCLAIMS(long value) {
      validate(fields()[9], value);
      this.COCO_TOTAL_PAID_CLAIMS = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'COCO_TOTAL_PAID_CLAIMS' field has been set.
      * @return True if the 'COCO_TOTAL_PAID_CLAIMS' field has been set, false otherwise.
      */
    public boolean hasCOCOTOTALPAIDCLAIMS() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'COCO_TOTAL_PAID_CLAIMS' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.CoreContractsSchema.Builder clearCOCOTOTALPAIDCLAIMS() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CoreContractsSchema build() {
      try {
        CoreContractsSchema record = new CoreContractsSchema();
        record.COCO_ID = fieldSetFlags()[0] ? this.COCO_ID : (java.lang.Long) defaultValue(fields()[0]);
        record.COCO_TYPE = fieldSetFlags()[1] ? this.COCO_TYPE : (java.lang.Long) defaultValue(fields()[1]);
        record.COOC_COVERAGE = fieldSetFlags()[2] ? this.COOC_COVERAGE : (java.lang.Long) defaultValue(fields()[2]);
        record.COCO_ANNUAL_PREMIUM = fieldSetFlags()[3] ? this.COCO_ANNUAL_PREMIUM : (java.lang.Long) defaultValue(fields()[3]);
        record.COCO_START_DATE = fieldSetFlags()[4] ? this.COCO_START_DATE : (java.lang.Long) defaultValue(fields()[4]);
        record.COCO_END_DATE = fieldSetFlags()[5] ? this.COCO_END_DATE : (java.lang.Long) defaultValue(fields()[5]);
        record.COCO_COCU_ID = fieldSetFlags()[6] ? this.COCO_COCU_ID : (java.lang.Long) defaultValue(fields()[6]);
        record.COCO_COAG_ID = fieldSetFlags()[7] ? this.COCO_COAG_ID : (java.lang.Long) defaultValue(fields()[7]);
        record.COCO_TOTAL_PAID_PREMIUMS = fieldSetFlags()[8] ? this.COCO_TOTAL_PAID_PREMIUMS : (java.lang.Long) defaultValue(fields()[8]);
        record.COCO_TOTAL_PAID_CLAIMS = fieldSetFlags()[9] ? this.COCO_TOTAL_PAID_CLAIMS : (java.lang.Long) defaultValue(fields()[9]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CoreContractsSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<CoreContractsSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CoreContractsSchema>
    READER$ = (org.apache.avro.io.DatumReader<CoreContractsSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
