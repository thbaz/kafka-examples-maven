/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.scigility.kafka.canonical.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NaturalPersonsSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4290240829811796162L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NaturalPersonsSchema\",\"namespace\":\"ch.scigility.kafka.canonical.avro\",\"fields\":[{\"name\":\"INCO_ID\",\"type\":\"long\"},{\"name\":\"INCO_TYPE\",\"type\":\"long\"},{\"name\":\"INCO_ANNUAL_PREMIUM\",\"type\":\"long\"},{\"name\":\"INCO_START_DATE\",\"type\":\"long\"},{\"name\":\"INCO_END_DATE\",\"type\":\"long\"},{\"name\":\"INCO_INPA_CUST_ID\",\"type\":\"long\"},{\"name\":\"INCO_INAG_ID\",\"type\":\"long\"},{\"name\":\"INCO_RENTABILITY\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NaturalPersonsSchema> ENCODER =
      new BinaryMessageEncoder<NaturalPersonsSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NaturalPersonsSchema> DECODER =
      new BinaryMessageDecoder<NaturalPersonsSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<NaturalPersonsSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<NaturalPersonsSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NaturalPersonsSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this NaturalPersonsSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a NaturalPersonsSchema from a ByteBuffer. */
  public static NaturalPersonsSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long INCO_ID;
  @Deprecated public long INCO_TYPE;
  @Deprecated public long INCO_ANNUAL_PREMIUM;
  @Deprecated public long INCO_START_DATE;
  @Deprecated public long INCO_END_DATE;
  @Deprecated public long INCO_INPA_CUST_ID;
  @Deprecated public long INCO_INAG_ID;
  @Deprecated public long INCO_RENTABILITY;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NaturalPersonsSchema() {}

  /**
   * All-args constructor.
   * @param INCO_ID The new value for INCO_ID
   * @param INCO_TYPE The new value for INCO_TYPE
   * @param INCO_ANNUAL_PREMIUM The new value for INCO_ANNUAL_PREMIUM
   * @param INCO_START_DATE The new value for INCO_START_DATE
   * @param INCO_END_DATE The new value for INCO_END_DATE
   * @param INCO_INPA_CUST_ID The new value for INCO_INPA_CUST_ID
   * @param INCO_INAG_ID The new value for INCO_INAG_ID
   * @param INCO_RENTABILITY The new value for INCO_RENTABILITY
   */
  public NaturalPersonsSchema(java.lang.Long INCO_ID, java.lang.Long INCO_TYPE, java.lang.Long INCO_ANNUAL_PREMIUM, java.lang.Long INCO_START_DATE, java.lang.Long INCO_END_DATE, java.lang.Long INCO_INPA_CUST_ID, java.lang.Long INCO_INAG_ID, java.lang.Long INCO_RENTABILITY) {
    this.INCO_ID = INCO_ID;
    this.INCO_TYPE = INCO_TYPE;
    this.INCO_ANNUAL_PREMIUM = INCO_ANNUAL_PREMIUM;
    this.INCO_START_DATE = INCO_START_DATE;
    this.INCO_END_DATE = INCO_END_DATE;
    this.INCO_INPA_CUST_ID = INCO_INPA_CUST_ID;
    this.INCO_INAG_ID = INCO_INAG_ID;
    this.INCO_RENTABILITY = INCO_RENTABILITY;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return INCO_ID;
    case 1: return INCO_TYPE;
    case 2: return INCO_ANNUAL_PREMIUM;
    case 3: return INCO_START_DATE;
    case 4: return INCO_END_DATE;
    case 5: return INCO_INPA_CUST_ID;
    case 6: return INCO_INAG_ID;
    case 7: return INCO_RENTABILITY;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: INCO_ID = (java.lang.Long)value$; break;
    case 1: INCO_TYPE = (java.lang.Long)value$; break;
    case 2: INCO_ANNUAL_PREMIUM = (java.lang.Long)value$; break;
    case 3: INCO_START_DATE = (java.lang.Long)value$; break;
    case 4: INCO_END_DATE = (java.lang.Long)value$; break;
    case 5: INCO_INPA_CUST_ID = (java.lang.Long)value$; break;
    case 6: INCO_INAG_ID = (java.lang.Long)value$; break;
    case 7: INCO_RENTABILITY = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'INCO_ID' field.
   * @return The value of the 'INCO_ID' field.
   */
  public java.lang.Long getINCOID() {
    return INCO_ID;
  }

  /**
   * Sets the value of the 'INCO_ID' field.
   * @param value the value to set.
   */
  public void setINCOID(java.lang.Long value) {
    this.INCO_ID = value;
  }

  /**
   * Gets the value of the 'INCO_TYPE' field.
   * @return The value of the 'INCO_TYPE' field.
   */
  public java.lang.Long getINCOTYPE() {
    return INCO_TYPE;
  }

  /**
   * Sets the value of the 'INCO_TYPE' field.
   * @param value the value to set.
   */
  public void setINCOTYPE(java.lang.Long value) {
    this.INCO_TYPE = value;
  }

  /**
   * Gets the value of the 'INCO_ANNUAL_PREMIUM' field.
   * @return The value of the 'INCO_ANNUAL_PREMIUM' field.
   */
  public java.lang.Long getINCOANNUALPREMIUM() {
    return INCO_ANNUAL_PREMIUM;
  }

  /**
   * Sets the value of the 'INCO_ANNUAL_PREMIUM' field.
   * @param value the value to set.
   */
  public void setINCOANNUALPREMIUM(java.lang.Long value) {
    this.INCO_ANNUAL_PREMIUM = value;
  }

  /**
   * Gets the value of the 'INCO_START_DATE' field.
   * @return The value of the 'INCO_START_DATE' field.
   */
  public java.lang.Long getINCOSTARTDATE() {
    return INCO_START_DATE;
  }

  /**
   * Sets the value of the 'INCO_START_DATE' field.
   * @param value the value to set.
   */
  public void setINCOSTARTDATE(java.lang.Long value) {
    this.INCO_START_DATE = value;
  }

  /**
   * Gets the value of the 'INCO_END_DATE' field.
   * @return The value of the 'INCO_END_DATE' field.
   */
  public java.lang.Long getINCOENDDATE() {
    return INCO_END_DATE;
  }

  /**
   * Sets the value of the 'INCO_END_DATE' field.
   * @param value the value to set.
   */
  public void setINCOENDDATE(java.lang.Long value) {
    this.INCO_END_DATE = value;
  }

  /**
   * Gets the value of the 'INCO_INPA_CUST_ID' field.
   * @return The value of the 'INCO_INPA_CUST_ID' field.
   */
  public java.lang.Long getINCOINPACUSTID() {
    return INCO_INPA_CUST_ID;
  }

  /**
   * Sets the value of the 'INCO_INPA_CUST_ID' field.
   * @param value the value to set.
   */
  public void setINCOINPACUSTID(java.lang.Long value) {
    this.INCO_INPA_CUST_ID = value;
  }

  /**
   * Gets the value of the 'INCO_INAG_ID' field.
   * @return The value of the 'INCO_INAG_ID' field.
   */
  public java.lang.Long getINCOINAGID() {
    return INCO_INAG_ID;
  }

  /**
   * Sets the value of the 'INCO_INAG_ID' field.
   * @param value the value to set.
   */
  public void setINCOINAGID(java.lang.Long value) {
    this.INCO_INAG_ID = value;
  }

  /**
   * Gets the value of the 'INCO_RENTABILITY' field.
   * @return The value of the 'INCO_RENTABILITY' field.
   */
  public java.lang.Long getINCORENTABILITY() {
    return INCO_RENTABILITY;
  }

  /**
   * Sets the value of the 'INCO_RENTABILITY' field.
   * @param value the value to set.
   */
  public void setINCORENTABILITY(java.lang.Long value) {
    this.INCO_RENTABILITY = value;
  }

  /**
   * Creates a new NaturalPersonsSchema RecordBuilder.
   * @return A new NaturalPersonsSchema RecordBuilder
   */
  public static ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder newBuilder() {
    return new ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder();
  }

  /**
   * Creates a new NaturalPersonsSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NaturalPersonsSchema RecordBuilder
   */
  public static ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder newBuilder(ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder other) {
    return new ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder(other);
  }

  /**
   * Creates a new NaturalPersonsSchema RecordBuilder by copying an existing NaturalPersonsSchema instance.
   * @param other The existing instance to copy.
   * @return A new NaturalPersonsSchema RecordBuilder
   */
  public static ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder newBuilder(ch.scigility.kafka.canonical.avro.NaturalPersonsSchema other) {
    return new ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder(other);
  }

  /**
   * RecordBuilder for NaturalPersonsSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NaturalPersonsSchema>
    implements org.apache.avro.data.RecordBuilder<NaturalPersonsSchema> {

    private long INCO_ID;
    private long INCO_TYPE;
    private long INCO_ANNUAL_PREMIUM;
    private long INCO_START_DATE;
    private long INCO_END_DATE;
    private long INCO_INPA_CUST_ID;
    private long INCO_INAG_ID;
    private long INCO_RENTABILITY;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.INCO_ID)) {
        this.INCO_ID = data().deepCopy(fields()[0].schema(), other.INCO_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.INCO_TYPE)) {
        this.INCO_TYPE = data().deepCopy(fields()[1].schema(), other.INCO_TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.INCO_ANNUAL_PREMIUM)) {
        this.INCO_ANNUAL_PREMIUM = data().deepCopy(fields()[2].schema(), other.INCO_ANNUAL_PREMIUM);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.INCO_START_DATE)) {
        this.INCO_START_DATE = data().deepCopy(fields()[3].schema(), other.INCO_START_DATE);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.INCO_END_DATE)) {
        this.INCO_END_DATE = data().deepCopy(fields()[4].schema(), other.INCO_END_DATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.INCO_INPA_CUST_ID)) {
        this.INCO_INPA_CUST_ID = data().deepCopy(fields()[5].schema(), other.INCO_INPA_CUST_ID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.INCO_INAG_ID)) {
        this.INCO_INAG_ID = data().deepCopy(fields()[6].schema(), other.INCO_INAG_ID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.INCO_RENTABILITY)) {
        this.INCO_RENTABILITY = data().deepCopy(fields()[7].schema(), other.INCO_RENTABILITY);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NaturalPersonsSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.scigility.kafka.canonical.avro.NaturalPersonsSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.INCO_ID)) {
        this.INCO_ID = data().deepCopy(fields()[0].schema(), other.INCO_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.INCO_TYPE)) {
        this.INCO_TYPE = data().deepCopy(fields()[1].schema(), other.INCO_TYPE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.INCO_ANNUAL_PREMIUM)) {
        this.INCO_ANNUAL_PREMIUM = data().deepCopy(fields()[2].schema(), other.INCO_ANNUAL_PREMIUM);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.INCO_START_DATE)) {
        this.INCO_START_DATE = data().deepCopy(fields()[3].schema(), other.INCO_START_DATE);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.INCO_END_DATE)) {
        this.INCO_END_DATE = data().deepCopy(fields()[4].schema(), other.INCO_END_DATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.INCO_INPA_CUST_ID)) {
        this.INCO_INPA_CUST_ID = data().deepCopy(fields()[5].schema(), other.INCO_INPA_CUST_ID);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.INCO_INAG_ID)) {
        this.INCO_INAG_ID = data().deepCopy(fields()[6].schema(), other.INCO_INAG_ID);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.INCO_RENTABILITY)) {
        this.INCO_RENTABILITY = data().deepCopy(fields()[7].schema(), other.INCO_RENTABILITY);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'INCO_ID' field.
      * @return The value.
      */
    public java.lang.Long getINCOID() {
      return INCO_ID;
    }

    /**
      * Sets the value of the 'INCO_ID' field.
      * @param value The value of 'INCO_ID'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOID(long value) {
      validate(fields()[0], value);
      this.INCO_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_ID' field has been set.
      * @return True if the 'INCO_ID' field has been set, false otherwise.
      */
    public boolean hasINCOID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'INCO_ID' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_TYPE' field.
      * @return The value.
      */
    public java.lang.Long getINCOTYPE() {
      return INCO_TYPE;
    }

    /**
      * Sets the value of the 'INCO_TYPE' field.
      * @param value The value of 'INCO_TYPE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOTYPE(long value) {
      validate(fields()[1], value);
      this.INCO_TYPE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_TYPE' field has been set.
      * @return True if the 'INCO_TYPE' field has been set, false otherwise.
      */
    public boolean hasINCOTYPE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'INCO_TYPE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOTYPE() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_ANNUAL_PREMIUM' field.
      * @return The value.
      */
    public java.lang.Long getINCOANNUALPREMIUM() {
      return INCO_ANNUAL_PREMIUM;
    }

    /**
      * Sets the value of the 'INCO_ANNUAL_PREMIUM' field.
      * @param value The value of 'INCO_ANNUAL_PREMIUM'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOANNUALPREMIUM(long value) {
      validate(fields()[2], value);
      this.INCO_ANNUAL_PREMIUM = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_ANNUAL_PREMIUM' field has been set.
      * @return True if the 'INCO_ANNUAL_PREMIUM' field has been set, false otherwise.
      */
    public boolean hasINCOANNUALPREMIUM() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'INCO_ANNUAL_PREMIUM' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOANNUALPREMIUM() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_START_DATE' field.
      * @return The value.
      */
    public java.lang.Long getINCOSTARTDATE() {
      return INCO_START_DATE;
    }

    /**
      * Sets the value of the 'INCO_START_DATE' field.
      * @param value The value of 'INCO_START_DATE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOSTARTDATE(long value) {
      validate(fields()[3], value);
      this.INCO_START_DATE = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_START_DATE' field has been set.
      * @return True if the 'INCO_START_DATE' field has been set, false otherwise.
      */
    public boolean hasINCOSTARTDATE() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'INCO_START_DATE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOSTARTDATE() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_END_DATE' field.
      * @return The value.
      */
    public java.lang.Long getINCOENDDATE() {
      return INCO_END_DATE;
    }

    /**
      * Sets the value of the 'INCO_END_DATE' field.
      * @param value The value of 'INCO_END_DATE'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOENDDATE(long value) {
      validate(fields()[4], value);
      this.INCO_END_DATE = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_END_DATE' field has been set.
      * @return True if the 'INCO_END_DATE' field has been set, false otherwise.
      */
    public boolean hasINCOENDDATE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'INCO_END_DATE' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOENDDATE() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_INPA_CUST_ID' field.
      * @return The value.
      */
    public java.lang.Long getINCOINPACUSTID() {
      return INCO_INPA_CUST_ID;
    }

    /**
      * Sets the value of the 'INCO_INPA_CUST_ID' field.
      * @param value The value of 'INCO_INPA_CUST_ID'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOINPACUSTID(long value) {
      validate(fields()[5], value);
      this.INCO_INPA_CUST_ID = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_INPA_CUST_ID' field has been set.
      * @return True if the 'INCO_INPA_CUST_ID' field has been set, false otherwise.
      */
    public boolean hasINCOINPACUSTID() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'INCO_INPA_CUST_ID' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOINPACUSTID() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_INAG_ID' field.
      * @return The value.
      */
    public java.lang.Long getINCOINAGID() {
      return INCO_INAG_ID;
    }

    /**
      * Sets the value of the 'INCO_INAG_ID' field.
      * @param value The value of 'INCO_INAG_ID'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCOINAGID(long value) {
      validate(fields()[6], value);
      this.INCO_INAG_ID = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_INAG_ID' field has been set.
      * @return True if the 'INCO_INAG_ID' field has been set, false otherwise.
      */
    public boolean hasINCOINAGID() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'INCO_INAG_ID' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCOINAGID() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'INCO_RENTABILITY' field.
      * @return The value.
      */
    public java.lang.Long getINCORENTABILITY() {
      return INCO_RENTABILITY;
    }

    /**
      * Sets the value of the 'INCO_RENTABILITY' field.
      * @param value The value of 'INCO_RENTABILITY'.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder setINCORENTABILITY(long value) {
      validate(fields()[7], value);
      this.INCO_RENTABILITY = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'INCO_RENTABILITY' field has been set.
      * @return True if the 'INCO_RENTABILITY' field has been set, false otherwise.
      */
    public boolean hasINCORENTABILITY() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'INCO_RENTABILITY' field.
      * @return This builder.
      */
    public ch.scigility.kafka.canonical.avro.NaturalPersonsSchema.Builder clearINCORENTABILITY() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NaturalPersonsSchema build() {
      try {
        NaturalPersonsSchema record = new NaturalPersonsSchema();
        record.INCO_ID = fieldSetFlags()[0] ? this.INCO_ID : (java.lang.Long) defaultValue(fields()[0]);
        record.INCO_TYPE = fieldSetFlags()[1] ? this.INCO_TYPE : (java.lang.Long) defaultValue(fields()[1]);
        record.INCO_ANNUAL_PREMIUM = fieldSetFlags()[2] ? this.INCO_ANNUAL_PREMIUM : (java.lang.Long) defaultValue(fields()[2]);
        record.INCO_START_DATE = fieldSetFlags()[3] ? this.INCO_START_DATE : (java.lang.Long) defaultValue(fields()[3]);
        record.INCO_END_DATE = fieldSetFlags()[4] ? this.INCO_END_DATE : (java.lang.Long) defaultValue(fields()[4]);
        record.INCO_INPA_CUST_ID = fieldSetFlags()[5] ? this.INCO_INPA_CUST_ID : (java.lang.Long) defaultValue(fields()[5]);
        record.INCO_INAG_ID = fieldSetFlags()[6] ? this.INCO_INAG_ID : (java.lang.Long) defaultValue(fields()[6]);
        record.INCO_RENTABILITY = fieldSetFlags()[7] ? this.INCO_RENTABILITY : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NaturalPersonsSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<NaturalPersonsSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NaturalPersonsSchema>
    READER$ = (org.apache.avro.io.DatumReader<NaturalPersonsSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
